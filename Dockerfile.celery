# FROM python:3.11-bullseye
# ENV PYTHONUNBUFFERED=1

# # create code directory
# RUN mkdir /code
# WORKDIR /code

# # install python requirements
# RUN pip install --upgrade pip

# # copy just requirements and install before rest of code to avoid having to
# # reinstall packages during build every time code changes
# COPY requirements.txt requirements.txt
# RUN pip install -r requirements.txt

# RUN useradd -ms /bin/bash celery

# # copy code files
# COPY . /code/

# RUN chown -R celery:celery /code






# FROM --platform=linux/amd64 python:3.10

# USER root
# # Set the working directory to /app
# WORKDIR /app

# # installing google-chrome-stable
# RUN apt-get update && apt-get install -y wget unzip && \
#     wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
#     apt install -y ./google-chrome-stable_current_amd64.deb && \
#     rm google-chrome-stable_current_amd64.deb && \
#     apt-get clean

# # Copy only the requirements file, to improve build cache
# COPY requirements.txt ./

# # Install any needed packages specified in requirements.txt
# RUN pip install --no-cache-dir -r requirements.txt

# # Copy the rest of the application
# COPY .env last_run_at.json ./
# COPY data/ data/
# COPY src/ src/

# # Run scheduler.py when the container launches
# # CMD ["python", "src/scheduler.py"]
# CMD ["python", "src/downloader.py"]


FROM --platform=linux/amd64 python:3.10-slim

# Prevent Python from buffering stdout/stderr
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Install dependencies including Chrome
RUN apt-get update && apt-get install -y wget unzip curl && \
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
    apt install -y ./google-chrome-stable_current_amd64.deb && \
    rm google-chrome-stable_current_amd64.deb && \
    apt-get clean

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project code
COPY . .

# Create log and data dirs for uploads
RUN mkdir -p /app/logs /app/data && chmod -R 777 /app/logs /app/data

# Environment variables for Django
ENV DJANGO_SETTINGS_MODULE=brickwork_backend.settings
ENV PYTHONPATH=/app

# Collect static if needed
RUN python manage.py collectstatic --noinput || true

# Expose port for Django
EXPOSE 8000

# Default command for Django
# CMD ["gnicorn", "brickwork_backend.wsgi:application", "--bind", "0.0.0.0:8000"]
